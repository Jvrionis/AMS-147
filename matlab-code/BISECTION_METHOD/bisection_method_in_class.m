function [x0,res,Xk] = bisection_method_in_class(fun,a,b,TOL,NMAX)
%
% This function approximates the zero of fun(x) by using 
% the bisection method 
%
% Input: 
%        fun  -> function handle representing f(x)
%        a,b  -> define the endpoints of the interval [a,b]
%        TOL  -> tolerance on half interval |x(k)-x0|< TOL
%        NMAX -> maximum number of allowed iterations
%
% Output: 
%          x0 -> numerical approximation of the zero
%         res -> |fun(x0)|
%          Xk -> vector collecting all elements of the sequence
%                generated by the bisection method

if fun(a)==0 
    x0=a;
    res=0;
    Xk=a;
 return;
elseif fun(b)==0
    x0=b;
    res=0;
    Xk=b;
elseif fun(a)*fun(b)>0
    error('f(a)*f(b)>0 -> Please select another interval')
end

x=[a (a+b)/2 b];
I=(x(3)-x(1))/2;

iter=0;

while I>TOL && iter<=NMAX
    iter = iter+ 1;
    if fun(x(1))*fun(x(2))<0
        x(3)=x(2);
        x(2)=(x(1)+x(3))/2;
        I = (x(3)-x(1))/2;
        Xk(iter)=x(2);
    elseif fun(x(2))*fun(x(3))<0
        x(1)=x(2);
        x(2)=(x(1)+x(3))/2;
        I = (x(3)-x(1))/2;
        Xk(iter)=x(2);
    elseif fun(x(2)) ==0
        x0=x(2);
        Xk(iter)=x(2);
        res =0;
        return;
    end
      
    fprintf('\niter=%d     x0=%12.12f       I=%12.12f',iter,x(2),I)
        
end

x0=x(2);
res=abs(fun(x0));
    
    
    

end

